<pre>
  BIP: 404
  Layer: Informational
  Title: Analysis of Consensus-Layer Data Restrictions and Preservation of Bitcoin Core v30 Policy
  Author: iajhff <iajhff@proton.me>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-404
  Status: Draft
  Type: Informational
  Created: 2025-10-30
  License: CC0-1.0
</pre>

==Abstract==

This BIP provides technical analysis demonstrating that recently proposed consensus-level restrictions on transaction data fields are technically ineffective, economically counterproductive, and would break numerous legitimate Bitcoin applications while failing to achieve their stated objectives. We recommend maintaining Bitcoin Core v30's policy changes, which align mempool behavior with existing mining practices without altering Bitcoin's consensus rules. Importantly, v30 represents a '''policy change only'''—Bitcoin's underlying technology and consensus rules remain unchanged.

==Copyright==

This document is placed in the public domain.

==Motivation==

A recent proposal suggests implementing emergency consensus-level restrictions on Bitcoin transactions to prevent arbitrary data storage. This proposal contains fundamental technical flaws and misrepresents the nature of Bitcoin Core v30's changes. This BIP serves to:

# Clarify that Bitcoin Core v30 implements '''policy changes only''', not consensus changes
# Demonstrate that data storage in Bitcoin transactions cannot be prevented at the consensus layer
# Document legitimate use cases that would be broken by the proposed restrictions
# Provide historical context from Bitcoin's founders regarding protocol design philosophy
# Ensure the community understands that Bitcoin's underlying technology has not changed

As Satoshi Nakamoto stated when discussing Bitcoin's design philosophy:

<blockquote>"The nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime. Because of that, I wanted to design it to support every possible transaction type I could think of. Escrow transactions, bonded contracts, third party arbitration, multi-party signature, etc."</blockquote>

Bitcoin's flexibility was intentional, and its core design was meant to remain stable. The current debate concerns '''how we use''' this technology through policy, not whether the consensus technology itself should change.

==Understanding Bitcoin Core v30: Policy vs. Consensus==

'''Critical distinction:''' Bitcoin Core v30 changes '''mempool policy''' (which transactions nodes relay and miners typically include), NOT '''consensus rules''' (which transactions are valid in blocks).

===What Changed in v30===

* '''Policy change:''' Default `-datacarriersize` increased from 83 bytes to 100,000 bytes
* '''Consensus:''' No changes whatsoever
* '''Effect:''' Aligns default node policy with existing miner practices

===What Did NOT Change===

* Block size limits (unchanged: 4 MB weight limit)
* Transaction validation rules (unchanged)
* Script opcodes (unchanged)
* Signature validation (unchanged)
* Any consensus rules (unchanged)

'''Every transaction valid in Bitcoin Core v30 was already valid in v29, v28, and every prior version.''' The technology is identical. Only the default policy for transaction relay changed.

===Why This Matters===

The proposed restrictive BIP suggests v30 "presents a severe threat" and "sanction[s] data storage as an official feature." This fundamentally misunderstands Bitcoin's architecture:

# '''Policy has always been configurable:''' Users could already set `-datacarriersize=100000` in any Bitcoin Core version
# '''Miners already accept large data:''' Mining pools have long accepted transactions with large data via direct submission
# '''Consensus never changed:''' Large data transactions have always been consensus-valid

As Hal Finney observed:

<blockquote>"Bitcoin has a couple of things going for it: One is that it is distributed, with no single point of failure, no 'mint', no company with offices that can be subpoenaed and arrested and shut down. The other is that Bitcoin seems to be a very promising idea. I like the idea of basing security on the assumption that the CPU power of honest participants outweighs that of the attacker."</blockquote>

Policy is intentionally separate from consensus, allowing the ecosystem to adapt without requiring network-wide coordination or compromising Bitcoin's decentralized nature.

==Technical Analysis: Why Consensus Restrictions Are Ineffective==

===Summary of Technical Flaws===

The proposed consensus restrictions fail to prevent data storage because:

# Data can be embedded in output hashes (P2WSH, P2TR) - unlimited quantity
# Data can be embedded in fake public keys - indistinguishable until spent
# Data can be distributed across multiple transactions - bypassing per-transaction limits
# Witness data can contain multiple small pushes - bypassing per-push limits
# Taproot script leaves can each contain 520 bytes - allowing tens of kilobytes per transaction

'''Result:''' Proposed restrictions would break legitimate applications (Lightning, BitVM, covenants) while failing to prevent the data storage they aim to stop.

===Detailed Analysis===

====Flaw 1: P2WSH and P2TR Outputs (Unrestricted Hash-Based Storage)====

'''Technical Reality:'''

Pay-to-Witness-Script-Hash (P2WSH) and Pay-to-Taproot (P2TR) outputs contain 32-byte hashes that commit to spending conditions. At transaction creation time, there is '''no consensus validation''' that these hashes correspond to spendable scripts.

'''Data Storage Capacity:'''

* Each P2WSH or P2TR output: 32 bytes of arbitrary data
* No consensus limit on number of outputs per transaction
* Limited only by transaction weight (4 MB)
* Calculation: 4,000,000 bytes ÷ ~50 bytes per output = ~80,000 outputs × 32 bytes = '''2.56 MB of arbitrary data per transaction'''

'''Why Proposed BIP Doesn't Address This:'''

The BIP limits scriptPubKey size to 34 bytes "except for OP_RETURN." P2WSH and P2TR scriptPubKeys are exactly 34 bytes (witness version + 32-byte hash). The proposed restriction doesn't affect them at all.

'''Economic Impact:'''

Unlike OP_RETURN outputs (provably unspendable, prunable), hash-based data storage creates:
* Permanent UTXO set bloat (stored in RAM by all full nodes)
* Cannot be pruned without spending
* Requires additional transactions to "clean up"
* '''Far worse for network health than OP_RETURN'''

'''Conclusion:''' Restricting OP_RETURN incentivizes users to switch to hash-based storage, which is worse for the network.

====Flaw 2: Public Key Outputs (Unverifiable Until Spent)====

'''Technical Reality:'''

Pay-to-PubKey-Hash (P2PKH) and Pay-to-PubKey (P2PK) outputs contain elliptic curve public keys. Bitcoin consensus does not verify that these are valid EC points until the output is '''spent'''.

'''Data Storage Capacity:'''

* Compressed "public key": 33 bytes (1 byte prefix + 32 bytes data)
* Uncompressed "public key": 65 bytes (1 byte prefix + 64 bytes data)
* No limit on number of outputs
* Calculation: Similar to above, roughly '''2.6 MB per transaction''' using compressed fake keys

'''Detection:'''

Impossible to distinguish fake public keys from real ones without attempting to verify the EC point, which:
* Is computationally expensive (DoS vector if required for all outputs)
* Only proves the point is on the curve, not that anyone knows the private key
* Would break privacy (reveals information about outputs)

'''Proposed BIP's Approach:'''

Limits scriptPubKey to 34 bytes, which allows standard P2PKH and P2WPKH. Does not prevent fake public keys.

'''Conclusion:''' This data storage vector remains completely unaddressed.

====Flaw 3: Multi-Transaction Distribution====

'''Technical Reality:'''

Even if individual data fields are limited (e.g., 256 bytes per OP_PUSHDATA), nothing prevents creating multiple transactions:

* Attacker creates 100 transactions with 256 bytes each = 25.6 KB
* Attacker creates 1,000 transactions with 256 bytes each = 256 KB
* Limited only by block space and fees paid

'''Proposed BIP's Approach:'''

Limits individual data fields but not transaction count.

'''Economic Impact:'''

Distributing data across multiple transactions is '''worse''' for the network:
* More transaction overhead (inputs, outputs, signatures)
* More UTXO bloat (each transaction needs at least one output)
* More validation overhead
* More blockchain bloat overall

'''Conclusion:''' Proposed limits incentivize less efficient data storage methods.

====Flaw 4: Witness Stack Element Multiplication====

'''Technical Reality:'''

The proposed BIP limits OP_PUSHDATA operations to 256 bytes. However:
* Witness stacks can contain '''multiple stack elements'''
* Each element can be up to 256 bytes (under proposed rules)
* Total witness size is limited by block weight (4 MB), not element count

'''Data Storage Capacity:'''

Assuming 256-byte limit per push:
* Witness with 1,000 elements × 256 bytes = 256 KB in a single transaction witness
* Multiple inputs with witnesses = proportionally more

'''Proposed BIP's Approach:'''

Limits individual pushes to 256 bytes but doesn't limit total witness size or element count.

'''Conclusion:''' Data storage remains viable through witness stack fragmentation.

====Flaw 5: Taproot Script Leaves====

'''Technical Reality:'''

Taproot allows each transaction output to commit to a tree of alternative spending scripts (tapscripts). Each tapscript can be up to 520 bytes (existing consensus limit, unchanged by proposal).

'''Data Storage Capacity:'''

* Proposed limit: 128 script leaves (257-byte control block)
* Each tapscript: up to 520 bytes
* Calculation: 128 scripts × 520 bytes = '''66,560 bytes per output'''

'''When Data is Revealed:'''

Tapscript data is revealed in the witness when spent. While this is prunable, it still:
* Must be transmitted across the network
* Must be validated by all nodes
* Counts against block weight
* Is publicly archived by block explorers

'''Proposed BIP's Rationale:'''

Claims 128 scripts is "plenty for ordinary human-made scenarios" but admits it "may prove too limiting for advanced off-chain functionality such as used by BitVM."

'''Conclusion:''' Even with proposed restrictions, tens of kilobytes of data storage per transaction remains possible.

===Summary: Ineffectiveness of Consensus Restrictions===

'''No matter how many restrictions are added,''' data storage remains possible because:

# Bitcoin transactions inherently contain data fields
# Distinguishing "legitimate" from "arbitrary" data is impossible at consensus layer
# Any sufficiently strict rules would break Bitcoin's core functionality

The only way to completely prevent data storage would require:

* Verifying all public keys are valid EC points (expensive, DoS vector, privacy loss)
* Proving knowledge of preimages for all hashes (impossible without breaking privacy)
* Limiting transactions to single input/output (breaks Lightning, multisig, batch payments)
* Removing script capabilities entirely (breaks everything except basic transfers)

'''None of these are viable.''' Therefore, '''data storage on Bitcoin is inherent to its design and cannot be prevented at the consensus layer.'''

==Analysis of Specific Proposed Restrictions==

===Restriction 1: Limit scriptPubKey to 34 Bytes===

'''Stated Rationale:''' "scriptPubKeys must be stored indefinitely in quick-access memory"

'''Technical Analysis:'''

* True that UTXO set is stored in memory
* False that limiting to 34 bytes prevents data storage (see P2WSH/P2TR analysis above)
* All modern output types already use 34 bytes or less

'''Legitimate Uses Affected:'''

* None currently, but prevents future script innovations
* Forces all new designs to use witness programs (not always desirable)

'''Data Storage Impact:'''

* None—data storage continues via hash-based methods

'''Assessment:''' Ineffective and unnecessarily restrictive for future upgrades.

===Restriction 2: Limit OP_RETURN to 83 Bytes===

'''Stated Rationale:''' "Historically, up to 83 bytes have been tolerated only to avoid unprovably unspendable spam"

'''Technical Analysis:'''

This restriction is the least harmful but also the least effective:

'''Why It Doesn't Work:'''
* Data storage continues via methods listed above
* Incentivizes switching to unprunable storage (worse for network)
* Creates centralization (users submit directly to miners to bypass policy)

'''Legitimate Uses Affected:'''
* Timestamping services (cryptographic proofs + metadata often exceed 83 bytes)
* Sidechain anchoring (merkle roots + proofs require more data)
* Multi-protocol commitments (OpenTimestamps + other protocols)
* Layer 2 checkpointing (state roots + fraud proofs)

'''Bitcoin Core v30 Rationale:'''

The v30 increase to 100KB OP_RETURN was motivated by:
# Users already bypassing 83-byte limit via direct miner submission
# OP_RETURN is prunable (better than alternatives)
# Aligning policy with miner practice reduces centralization
# Honest pricing mechanism (fees reflect resource usage)

As Bitcoin Core contributor Greg Maxwell explained in 2013:

<blockquote>"The important thing is that OP_RETURN outputs are provably prunable. If someone wants to store data, much better they use a mechanism that can be thrown away than one that bloats the UTXO set forever."</blockquote>

'''Assessment:''' Reverting to 83 bytes makes data storage worse for the network by incentivizing unprunable alternatives.

===Restriction 3: Limit OP_PUSHDATA to 256 Bytes===

'''Stated Rationale:''' "With modern compression, it is plausible to represent objectionable images in as few as 300-400 bytes. 256 bytes... is more than sufficient for reasonably large numbers that might be potentially needed in legitimate cryptography."

'''Technical Analysis:'''

'''Flawed Premise:'''
* Assumes cryptography only needs "numbers"
* Ignores legitimate uses of larger data pushes:
  - Merkle proofs (variable size, can exceed 256 bytes)
  - Batched signatures (Schnorr aggregation, future upgrades)
  - Complex script templates
  - Zero-knowledge proofs (often kilobytes)

'''Data Storage Impact:'''
* Minimal—data can be fragmented across multiple pushes
* Adds slight complexity but doesn't prevent storage

'''Legitimate Uses Affected:'''
* Zero-knowledge proof systems (OP_STARKVERIFY, etc.)
* Complex covenant constructions
* Future signature aggregation schemes
* Merkle proof inclusion (variable sizes)

'''Exception Handling:'''
The BIP creates an exception for BIP16 P2SH redeemScripts, acknowledging that legitimate uses require larger pushes. This exception proves the rule: '''arbitrary push size limits break legitimate uses.'''

'''Assessment:''' Ineffective at preventing data storage; harmful to legitimate cryptographic applications.

===Restriction 4: Ban Spending Undefined Witness Versions===

'''Stated Rationale:''' "Since they are undefined, witness stacks spending these versions are completely unlimited currently... Any future upgrade, however, would need more than a year of coordination, so this softfork will not actually restrict it."

'''Technical Analysis:'''

'''Contradictory Logic:'''
* Admits future upgrades need >1 year coordination
* Proposes 1-year temporary softfork
* Conclusion: This '''would''' restrict future upgrades that activate within the 1-year window

'''Impact on Development:'''
* Chilling effect on protocol development
* Uncertainty for developers (will restrictions be renewed?)
* Delays testing and deployment of new witness versions

'''Data Storage Impact:'''
* Prevents using undefined witness versions for data storage
* Data storage continues via defined witness versions (v0, v1)

'''Upgrade Coordination Problem:'''

Bitcoin soft fork activation typically requires:
1. Development and testing: 6-12 months
2. Community discussion: 3-6 months  
3. Signaling period: 3-12 months
4. Activation and deployment: 1-3 months

Total: '''1-2.5 years minimum''' for non-emergency soft forks.

If restrictions expire after 1 year, any upgrade that began development during the restriction period would need to:
* Wait for restrictions to expire, OR
* Include renewal of restrictions, OR
* Work within restriction constraints

'''Assessment:''' Creates development uncertainty; minimal impact on data storage.

===Restriction 5: Ban Taproot Annex===

'''Stated Rationale:''' "The annex is currently undefined data with unlimited size... has no legitimate usage today."

'''Technical Analysis:'''

'''What is the Annex:'''
* Optional field in Taproot spending witness
* Reserved for future protocol upgrades
* Currently undefined (nodes ignore it)

'''Proposed Uses:'''
* Additional signature data
* Covenant conditions
* Fee management metadata
* Extended script functionality

'''Impact of Banning:'''
* Prevents one potential future upgrade path
* Forces alternative designs (not necessarily better)
* Data storage continues via other witness elements

'''Temporary Nature Problem:'''
If annex is banned temporarily, any future upgrade proposing to use it must either:
* Wait for ban to expire
* Include renewal of ban with exception for specific use
* Design around the ban

This creates the same development uncertainty as banning undefined witness versions.

'''Assessment:''' Minimal security benefit; creates upgrade complexity.

===Restriction 6: Limit Taproot Control Block to 257 Bytes===

'''Stated Rationale:''' "The previous limit allows for 340,282,366,920,938,463,463,374,607,431,768,211,456 scripts... 257 bytes allows for 128 scripts, which is plenty for ordinary human-made scenarios."

'''Technical Analysis:'''

This is the '''most damaging''' proposed restriction.

'''Current Taproot Design:'''
* Control block contains merkle proof from revealed script to taptree root
* Size: 33 bytes (pubkey + parity) + 32 bytes × tree depth
* Maximum depth: 128 levels (4,096 bytes)
* Purpose: Enable enormous script trees for advanced applications

'''257-Byte Limit:'''
* 33-byte header + 224 bytes for hashes = 7 levels deep
* 2^7 = '''128 scripts maximum'''

'''Applications Broken:'''

'''1. BitVM (Bitcoin Virtual Machine)'''
* Requires thousands to millions of possible execution paths
* Each computational step = separate tapscript
* 128 script limit makes BitVM essentially impossible
* Impact: Cannot implement Bitcoin-secured computation

'''2. Channel Factories and Payment Pools'''
* Scale Lightning by creating multiparty channels
* Each participant combination = separate tapscript
* For n participants: 2^n possible combinations
* 128 scripts = maximum 7 participants
* Impact: Severely limits Lightning scaling research

'''3. Covenant Constructions'''
* Complex vault designs use multiple recovery paths
* Each time delay + condition = separate script
* 128 scripts may be insufficient for sophisticated security models

'''4. Future Applications'''
* ZK-proof systems (STARK trees, recursive proofs)
* Advanced DLCs (discreet log contracts with many outcomes)
* Federated protocols (many participant combinations)

'''BIP's Own Admission:'''

The proposal acknowledges: "However, it may prove too limiting for advanced off-chain functionality such as used by BitVM. This is an unfortunate tradeoff that (if this softfork is accepted) we have chosen to accept."

'''Assessment:''' Catastrophically breaks advanced Bitcoin applications; minimal data storage impact (still allows 66KB per output as calculated earlier).

===Restriction 7: Ban OP_SUCCESS Opcodes===

'''Stated Rationale:''' "OP_SUCCESS* is meant for future upgrades."

'''Technical Analysis:'''

'''What are OP_SUCCESS Opcodes:'''
* Opcodes reserved in Tapscript for future soft forks
* Currently make script unconditionally valid
* Allow future upgrades to add functionality without breaking old nodes

'''Examples of Proposed OP_SUCCESS Uses:'''
* OP_CHECKSIGFROMSTACK (covenant verification)
* OP_CAT (concatenation for covenant construction)
* OP_STARKVERIFY (zero-knowledge proof verification)
* OP_TXHASH (transaction introspection)

'''Impact of Temporary Ban:'''
* Any upgrade proposing OP_SUCCESS usage must wait for ban expiry
* Creates 1-year delay on all covenant research
* Chilling effect on protocol development

'''Data Storage Impact:'''
* OP_SUCCESS opcodes don't currently enable data storage (they make scripts unconditionally valid)
* No security benefit from banning

'''Assessment:''' No security benefit; delays protocol innovation.

===Restriction 8: Ban OP_IF and OP_NOTIF in Tapscripts===

'''Stated Rationale:''' "With Taproot, the conditions can instead be evaluated off-chain, revealing only the intended verification execution path... OP_IF is not only redundant for Tapscript, it is also commonly abused today to inject spam."

'''Technical Analysis:'''

This restriction represents a '''fundamental misunderstanding''' of Bitcoin script and breaks critical functionality.

'''What OP_IF Does:'''
* Conditional execution based on runtime stack value
* Allows one script to have multiple execution paths
* Essential for time-based conditions, hashlocks, and state machines

'''Why "Use Separate Tapscripts" Doesn't Work:'''

'''1. Time-Based Conditions'''

Hash Time-Locked Contracts (HTLCs) in Lightning require:

```
OP_IF
    # Payment path: check hash preimage
    OP_HASH160 <payment_hash> OP_EQUALVERIFY
    <recipient_pubkey> OP_CHECKSIG
OP_ELSE
    # Timeout path: check timelock
    <timeout> OP_CHECKLOCKTIMEVERIFY OP_DROP
    <sender_pubkey> OP_CHECKSIG
OP_ENDIF
```

'''This cannot be split into separate tapscripts because:'''
* The choice depends on runtime state (is timeout reached?)
* Both paths must be in the SAME script for atomic security
* Splitting into two leaves would allow spending via either path at any time (security failure)

'''2. Hashlock Verification'''

Atomic swaps and HTLCs require checking hash preimages:

```
OP_IF
    # Success path: hash preimage provided
    OP_HASH256 <hash> OP_EQUALVERIFY <pubkey> OP_CHECKSIG
OP_ELSE
    # Refund path: timeout reached
    <timeout> OP_CHECKLOCKTIMEVERIFY OP_DROP <refund_pubkey> OP_CHECKSIG
OP_ENDIF
```

'''Cannot use separate tapscripts because:'''
* Preimage is unknown at transaction creation
* Must verify hash in same script that checks signature
* Security requires both conditions in one atomic execution

'''3. Penalty Mechanisms'''

Lightning penalty transactions use OP_IF for:
* Immediate spending by counterparty with revocation key
* Delayed spending by channel owner after timeout

These must be in one script for security.

'''Applications Completely Broken:'''

* '''Lightning Network''': All HTLCs use OP_IF (network becomes non-functional)
* '''Atomic Swaps''': Cross-chain swaps require OP_IF for hashlocks
* '''DLCs (Discreet Log Contracts)''': Conditional payouts based on oracle signatures
* '''Vaults''': Time-delayed recovery paths
* '''Federated Sidechains''': Conditional withdrawal paths
* '''Channel Factories''': Complex conditional channel states

'''BIP's Justification:'''

"OP_IF... is also commonly abused today to inject spam that gets skipped at execution."

'''Counter-Analysis:'''
* If spam is in an unexecuted branch, it still consumes witness weight
* Users already pay fees for witness weight
* Banning OP_IF doesn't reduce weight of spam (users switch to multiple push operations)
* Breaks critical functionality for negligible anti-spam benefit

'''Assessment:''' '''CATASTROPHIC''' impact on Bitcoin ecosystem. Makes Lightning Network, atomic swaps, and most advanced Bitcoin applications completely non-functional. Utterly unacceptable.

==Economic Analysis==

===Current State: Fee Market Pricing===

Bitcoin's fee market efficiently allocates block space through voluntary exchange and competition. As Satoshi designed it, the system operates without central planning or subjective judgments:

* Users bid for inclusion via transaction fees
* Miners include highest-paying transactions
* Block space cost reflects demand
* No central authority determines "legitimate" vs "illegitimate" use

Satoshi emphasized this market-based approach:

<blockquote>"Instead of the supply changing to keep the value the same, the supply is predetermined and the value changes. As the number of users grows, the value per coin increases."</blockquote>

This mechanism works for all transaction types, including data storage:

* Data storage transactions pay fees
* Fees compensate miners for resources (bandwidth, storage, validation)
* Other users outbid data storage if they value block space more
* Market equilibrium naturally limits spam

===OP_RETURN vs. Alternative Storage Methods===

'''OP_RETURN Characteristics:'''

* Provably unspendable (OP_RETURN marks output as unspendable)
* Never added to UTXO set
* Can be pruned immediately after validation
* Stored on disk, not in RAM
* Clear semantic: "this is data"
* Efficient and honest

'''Alternative Storage Methods:'''

* P2WSH/P2TR fake outputs: Added to UTXO set (RAM bloat)
* Fake public keys: Added to UTXO set until spent
* Unprunable until spent
* Require "cleanup" spending transactions (more bloat)
* Obscure intent (appear as legitimate outputs)
* Less efficient, dishonest

'''Economic Comparison:'''

{| class="wikitable"
! Method
! UTXO Bloat
! Prunability
! Perpetual Cost to Nodes
! Fee Paid
! Efficiency
|-
| OP_RETURN (v30)
| None
| Immediately
| None (prunable)
| Full fee for block space
| Highest
|-
| P2WSH/P2TR hashes
| Permanent
| Only after spent
| RAM cost forever
| Fee + external spend needed
| Low
|-
| Fake public keys
| Permanent
| Only after spent
| RAM cost forever
| Fee + external spend needed
| Low
|-
| Multi-transaction distribution
| Permanent
| Only after spent
| RAM cost forever
| Multiple tx fees
| Lowest
|}

'''Conclusion:''' Restricting OP_RETURN incentivizes users to switch to methods that are '''worse''' for network health.

===Centralization Concerns===

'''Before v30:''' 83-byte OP_RETURN limit

* Users wanting larger data submitted directly to mining pools
* Created special relationships between users and miners
* Mempool policy diverged from mining practice
* Centralization pressure (need miner connections)

'''After v30:''' 100KB OP_RETURN limit

* Users can submit to public mempool
* No special miner relationships needed
* Mempool policy aligned with mining practice
* Decentralization improvement (permissionless submission)

'''If Proposed BIP Enacted:''' Consensus restrictions

* Users revert to direct miner submission
* Mining pools differentiate by offering "unrestricted" services
* Further centralization of mining
* Enforced via consensus (even worse)

'''Assessment:''' v30 reduces centralization; proposed restrictions increase it.

==Legitimate Use Cases==

===1. Lightning Network===

'''Current Dependency:''' Extensive use of OP_IF/OP_NOTIF in HTLCs

'''Impact of Ban:''' Lightning Network becomes completely non-functional

'''Economic Impact:''' 
* Millions of users affected
* Billions of dollars in channel liquidity frozen
* Entire Lightning ecosystem collapses

'''Technical Assessment:''' This alone makes the proposal completely unacceptable.

===2. BitVM and Advanced Computation===

'''Current Dependency:''' Large taproot trees (>128 scripts)

'''Impact of 257-Byte Control Block Limit:''' BitVM impossible

'''Economic Impact:'''
* Halts major Bitcoin innovation
* Research and development wasted
* Competitive disadvantage vs. other blockchains

===3. Sidechain and L2 Anchoring===

'''Current Dependency:''' OP_RETURN >83 bytes for merkle roots, checkpoints, fraud proofs

'''Impact of 83-Byte Limit:''' Many L2 protocols broken or severely degraded

'''Examples:'''
* RSK (rootstock): Block header commitments
* Liquid: Peg-in transaction metadata
* RGB Protocol: Client-side validation commitments
* Future rollup designs: State root commitments

===4. Timestamping and Proof-of-Existence===

'''Current Dependency:''' OP_RETURN for hash commitments + metadata

'''Examples:'''
* OpenTimestamps: Merkle tree roots
* Proof-of-existence services: Document hashes + identifiers
* Supply chain verification: Multi-hash commitments
* Academic publishing: Timestamps for research data

'''Impact of 83-Byte Limit:''' 
* Single SHA-256 hash: 32 bytes
* Protocol identifier: 4-8 bytes
* Merkle proof: Variable (often >47 bytes)
* Metadata: Variable
* Total: Often exceeds 83 bytes

===5. Future Covenant Proposals===

'''Current Dependency:''' OP_SUCCESS opcodes, larger scripts, flexible taproot trees

'''Proposals Affected:'''
* OP_CHECKSIGFROMSTACK (covenant verification)
* OP_CAT (data manipulation for covenants)
* OP_VAULT (specialized vault opcodes)
* OP_TXHASH (transaction introspection)

'''Impact:''' All covenant research delayed minimum 1 year, possibly longer if restrictions renewed.

===6. Decentralized Identity and Web3===

'''Current Dependency:''' OP_RETURN for DID documents, credentials, attestations

'''Examples:'''
* ION (Microsoft's Bitcoin DID): Large DID documents
* Decentralized credentials: Credential commitments
* Web3 authentication: Proof anchoring

==Legal and Philosophical Analysis==

===Claimed Threat: Illegal Content===

The proposed BIP's primary motivation is preventing illegal content storage. Analysis:

'''1. Illegal Content Already Exists on Bitcoin'''

The blockchain already contains various data embedded historically. The proposed solution is reactive, not preventative.

'''2. Legal Status of Node Operators is Unclear'''

* No comprehensive legal analysis provided in BIP
* Node operators may be analogous to ISPs (common carrier immunity)
* Varies by jurisdiction
* Possession vs. knowing possession distinction
* Technical inability to remove (unlike ISPs) may provide defense

'''3. Consensus Rules Are Not the Solution'''

* Consensus rules are permanent protocol changes
* Appropriate for preventing inflation, ensuring cryptographic security
* Not appropriate for addressing legal/social concerns that vary by jurisdiction and time

'''4. Data Storage Remains Possible'''

As demonstrated extensively above, the proposed restrictions don't prevent data storage. Therefore, '''even if accepted, the BIP would not address its stated threat.'''

===Censorship Resistance===

Bitcoin's core value proposition includes censorship resistance and neutrality. As Satoshi wrote in the Bitcoin whitepaper introduction:

<blockquote>"The root problem with conventional currency is all the trust that's required to make it work. The central bank must be trusted not to debase the currency, but the history of fiat currencies is full of breaches of that trust. Banks must be trusted to hold our money and transfer it electronically, but they lend it out in waves of credit bubbles with barely a fraction in reserve."</blockquote>

Bitcoin was designed to eliminate the need for trusted third parties making subjective decisions. Censorship resistance is essential to this trust-minimization. While the proposed BIP claims "this is not censorship," the technical reality is:

* Rules specifically target certain types of content (large data)
* Justification is based on potential content of that data
* Creates precedent for content-based protocol restrictions
* Undermines "neutral protocol" principle

Once consensus rules encode subjective judgments about data types, the precedent is set for future subjective restrictions.

===Conflict of Interest Disclosure===

'''Transparency Note:''' The proposed restrictive BIP's author (Luke-Jr) is associated with:

# '''Bitcoin Knots''': An alternative full node implementation with more restrictive default policies
# '''Ocean.xyz''': A mining pool that emphasizes transaction filtering and template customization

These affiliations may present conflicts of interest:

* Bitcoin Knots differentiates itself via stricter policies (benefits from consensus enforcing those policies)
* Ocean.xyz offers filtered transaction templates (benefits from restricting mempool standards)
* Policy restrictions at consensus level advantage implementations with already-strict defaults

'''This does not impugn motives,''' but transparency requires acknowledging potential conflicts. The Bitcoin community should evaluate BIPs on technical merit, independent of author affiliations.

===Historical Precedent: Bitcoin's Philosophy===

Satoshi Nakamoto designed Bitcoin with flexibility and neutrality as core principles. As Satoshi explained:

<blockquote>"The nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime. Because of that, I wanted to design it to support every possible transaction type I could think of."</blockquote>

This emphasizes:

* '''Core consensus design should be stable and unchanging'''
* Forward compatibility for future uses
* Flexibility for innovation  
* Neutral protocol (not opinionated about "legitimate" uses)
* Minimal consensus rules

Satoshi further elaborated on Bitcoin's transaction flexibility:

<blockquote>"The design supports a tremendous variety of possible transaction types that I designed years ago. Escrow transactions, bonded contracts, third party arbitration, multi-party signature, etc. If Bitcoin catches on in a big way, these are things we'll want to explore in the future, but they all had to be designed at the beginning to make sure they would be possible later."</blockquote>

Hal Finney reinforced Bitcoin's role as a tool for liberation, not control:

<blockquote>"The computer can be used as a tool to liberate and protect people, rather than to control them."</blockquote>

And emphasized its decentralized nature:

<blockquote>"Bitcoin has a couple of things going for it: One is that it is distributed, with no single point of failure, no 'mint', no company with offices that can be subpoenaed and arrested and shut down."</blockquote>

The vision: '''Bitcoin as a neutral base layer with stable consensus, while policy and specialized features implemented at higher layers.'''

==Activation Concerns==

===Proposed Emergency Activation===

The BIP proposes two activation methods:

# '''Proactive:''' Flag day activation in early 2026
# '''Reactive:''' Immediate activation with chain reorganization if "illegal content" appears

'''Problems with Emergency Activation:'''

'''1. No Signaling Period'''

Traditional Bitcoin soft forks include:
* Lengthy discussion (6-12 months)
* Implementation and testing (6-12 months)
* Signaling period for miner coordination (3-12 months)
* Activation only after supermajority support

Proposed emergency activation skips all of this.

'''2. Chain Reorganization'''

The "reactive" method proposes '''rolling back already-mined blocks.'''

'''Unprecedented in this context:'''
* 2010 inflation bug: Clear consensus violation (created invalid coins)
* 2013 chain split: Unintentional hard fork (emergency response to restore consensus)

Both cases involved '''consensus failures''', not policy preferences about data types.

Proposed reorganization is based on '''subjective judgment''' about data content, not objective consensus violation.

'''3. Economic Disruption'''

Immediate activation causes:
* Exchange deposit/withdrawal halts
* Lightning channel closure uncertainty
* Transaction reversal risk
* Mining reward loss
* Ecosystem chaos

For comparison, even the 2010 inflation bug (objective consensus failure) caused severe disruption. A subjective policy change would face far more resistance.

'''4. Precedent Setting'''

Emergency activation for non-consensus-breaking issues sets dangerous precedent:
* Normalizes rushed protocol changes
* Suggests subjective judgments warrant emergency response
* Undermines Bitcoin's stability and predictability
* Creates governance crisis (who decides what's an "emergency"?)

===Temporary Soft Fork Problems===

The proposal suggests a 1-year temporary soft fork. '''This is unprecedented and problematic:'''

'''1. Development Uncertainty'''

* Developers cannot build on temporary foundation
* Projects require multi-year development timelines
* Uncertainty whether restrictions will be renewed
* Chilling effect on innovation

'''2. Activation Complexity'''

* Requires TWO activation events (start and expiry)
* Expiry must be coordinated (or creates automatic hard fork)
* Renewal requires another contentious activation debate
* Annual recurring controversy

'''3. Economic Planning'''

* Businesses cannot plan for temporary rules
* Investment in affected technologies frozen
* Competitive disadvantage vs. stable blockchains

'''4. Precedent'''

* Temporary consensus rules are philosophically problematic
* Consensus should be stable, predictable, minimal
* Temporary rules undermine these properties

==Recommendations==

Based on the technical, economic, and philosophical analysis above, we recommend:

===1. Maintain Bitcoin Core v30 Policy===

'''Rationale:'''
* OP_RETURN expansion aligns policy with mining practice
* Reduces centralization (no more direct-to-miner submission required)
* Enables legitimate use cases (L2 anchoring, timestamping)
* Prunable data is better than UTXO bloat alternatives

'''Implementation:'''
No changes needed—continue with v30 defaults.

===2. Preserve Full Taproot Functionality===

'''Rationale:'''
* Breaking OP_IF destroys Lightning Network
* Limiting control blocks prevents BitVM and advanced applications
* Banning OP_SUCCESS delays covenant research
* No security benefit

'''Implementation:'''
Reject consensus restrictions on Taproot features.

===3. Policy-Based Spam Management===

'''Rationale:'''
* Policy is appropriate layer for spam prevention
* Allows local node operator choice
* Enables evolution without consensus changes
* Fee market naturally limits spam

'''Implementation:'''
Node operators can individually configure:

```bash
# Example: Conservative policy settings
bitcoind -datacarriersize=83        # Old OP_RETURN limit
bitcoind -permitbaremultisig=0      # Reject bare multisig
bitcoind -bytespersigop=50          # Higher sigop cost
bitcoind -maxmempool=50             # Smaller mempool
```

===4. Education and Communication===

'''Rationale:'''
* Much confusion stems from misunderstanding v30 changes
* Policy vs. consensus distinction not widely understood
* Clear communication reduces panic

'''Implementation:'''
* Educational materials explaining v30 (policy change only)
* Documentation of Bitcoin's design philosophy
* Technical explanations of why consensus restrictions don't work

===5. Continued Research on Pruning and Efficiency===

'''Rationale:'''
* Long-term blockchain size is legitimate concern
* Solutions should be technical, not punitive
* Innovation can improve efficiency without breaking functionality

'''Possible Directions:'''
* Improved pruning modes
* UTXO set compression research
* Layer 2 scaling (move activity off-chain)
* Block compression protocols

==Specification==

This BIP proposes '''no consensus changes.'''

It recommends:

# Maintain Bitcoin Core v30 OP_RETURN policy (100KB default `-datacarriersize`)
# Preserve full Taproot functionality (no restrictions on control blocks, OP_IF, OP_SUCCESS, annex)
# Maintain upgrade hooks (undefined witness versions remain spendable)
# Allow individual node operators to configure stricter policies locally if desired

==Backwards Compatibility==

This BIP maintains full backwards compatibility with all Bitcoin versions, as it proposes no consensus changes.

Node operators wishing to enforce stricter local policies can do so via configuration options, maintaining compatibility with the network while expressing individual preferences.

==Reference Implementation==

Not applicable—this BIP recommends maintaining existing Bitcoin Core v30 implementation without modifications.

==Security Considerations==

===UTXO Set Growth===

Primary security concern: UTXO set must be stored in fast-access memory (RAM) by all full nodes.

'''OP_RETURN impact:''' Zero (provably unspendable, never added to UTXO set)

'''Alternative data storage impact:''' High (fake outputs added to UTXO set, cannot be pruned)

'''Conclusion:''' OP_RETURN is security-optimal for data storage use case.

===Consensus vs. Policy Separation===

Maintaining clear separation between consensus and policy is critical for security:

* '''Consensus:''' Minimal, stable, extremely high bar for changes
* '''Policy:''' Flexible, evolvable, node operator discretion

Blurring this line weakens Bitcoin's security model by:
* Requiring consensus changes for issues better handled by policy
* Increasing complexity of consensus rules
* Creating activation risk and controversy
* Setting precedent for subjective consensus rules

===Network Stability===

Emergency activation, chain reorganization, and temporary consensus rules all threaten network stability:

* Uncertainty disrupts economic activity
* Rushed changes increase bug risk
* Controversy creates political instability
* Precedent normalizes instability

Bitcoin's security depends on stability and predictability. Proposals that undermine these properties pose security risks even if technically correct.

==Conclusion==

The proposed consensus-level data restrictions are:

'''1. Technically Ineffective'''
* Data storage continues via P2WSH/P2TR hashes
* Fake public keys remain viable
* Multi-transaction distribution bypasses limits
* Witness fragmentation works around push limits

'''2. Economically Harmful'''
* Incentivize switching to unprunable storage (UTXO bloat)
* Increase centralization (direct-to-miner submission)
* Disrupt fee market efficiency

'''3. Catastrophically Break Legitimate Uses'''
* Lightning Network completely non-functional (OP_IF ban)
* BitVM impossible (control block limit)
* L2 protocols degraded (OP_RETURN limit)
* Covenant research halted (OP_SUCCESS ban)

'''4. Philosophically Inconsistent with Bitcoin'''
* Satoshi designed for flexibility and variety of uses
* Neutral protocol principle violated
* Consensus should be minimal, not opinionated

'''5. Set Dangerous Precedents'''
* Emergency activation for non-consensus issues
* Temporary consensus rules
* Content-based restrictions
* Subjective judgments in protocol

'''Bitcoin Core v30 represents responsible policy evolution:'''

* Aligns mempool with mining practice (reduces centralization)
* Enables prunable data storage (better than alternatives)
* Maintains consensus unchanged (Bitcoin technology identical)
* Allows individual node operators to configure stricter local policies

We recommend the Bitcoin community:

# Understand v30 is policy change only (consensus unchanged)
# Recognize data storage cannot be prevented at consensus layer
# Preserve critical functionality (Lightning, BitVM, covenants)
# Handle spam via policy and fee market
# Maintain Bitcoin's philosophical foundation: neutral, minimal, stable consensus

As Hal Finney emphasized about Bitcoin's foundational principles:

<blockquote>"The computer can be used as a tool to liberate and protect people, rather than to control them."</blockquote>

And as Satoshi designed:

<blockquote>"The nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime."</blockquote>

Let's honor this vision by keeping consensus stable and handling policy concerns at the appropriate layer.

==Acknowledgments==

Thanks to Satoshi Nakamoto and Hal Finney for creating Bitcoin and establishing its philosophical foundation. Thanks to Bitcoin Core developers for maintaining the neutral protocol. Thanks to the community for engaging in thoughtful technical discussion.

==References==

* Bitcoin Core v30 Release Notes
* BIP 141: Segregated Witness (Consensus layer)
* BIP 341: Taproot: SegWit version 1 spending rules
* BIP 342: Validation of Taproot Scripts
* Lightning Network BOLT Specifications
* BitVM Whitepaper (Robin Linus, 2023)
* Satoshi Nakamoto's writings (bitcointalk.org archives)
* Hal Finney's writings (Bitcoin Forum archives)

==Copyright==

This document is placed in the public domain under CC0-1.0.
